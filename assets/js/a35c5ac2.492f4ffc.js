"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[233],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return g}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(r),g=n,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||o;return r?a.createElement(d,i(i({ref:t},l),{},{components:r})):a.createElement(d,i({ref:t},l))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1755:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var a=r(3117),n=(r(7294),r(3905));const o={sidebar_position:2},i="Actor grouping",p={unversionedId:"supported-libraries/akka/actor-grouping",id:"supported-libraries/akka/actor-grouping",title:"Actor grouping",description:"When the actors' hierarchy grows or there are short-living actors referenced by a unique path name, it can be impractical to give each metric a unique set of attributes. This amplifies the amount of data exported and can affect collector performance. To solve this, Mesmer allows the definition of fine-grained rules on how metrics associated with different actors can be grouped together.",source:"@site/../mesmer-docs/target/mdoc/supported-libraries/akka/actor-grouping.md",sourceDirName:"supported-libraries/akka",slug:"/supported-libraries/akka/actor-grouping",permalink:"/docs/supported-libraries/akka/actor-grouping",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Supported metrics",permalink:"/docs/supported-libraries/akka/supported-metrics"},next:{title:"Supported metrics",permalink:"/docs/supported-libraries/zio/supported-metrics"}},s={},c=[],l={toc:c};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"actor-grouping"},"Actor grouping"),(0,n.kt)("p",null,"When the actors' hierarchy grows or there are short-living actors referenced by a unique path name, it can be impractical to give each metric a unique set of attributes. This amplifies the amount of data exported and can affect collector performance. To solve this, Mesmer allows the definition of fine-grained rules on how metrics associated with different actors can be grouped together."),(0,n.kt)("p",null,"There are three actor attributes grouping options:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"group")," - the metrics, collected for all the actors matching the given path, share the ",(0,n.kt)("inlineCode",{parentName:"li"},"actor_path")," attribute."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"instance")," - the metrics, collected for actors matching this path, have a unique ",(0,n.kt)("inlineCode",{parentName:"li"},"actor_path")," attribute."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"disabled")," - the metrics, collected for all the actors matching the given path, do not get ",(0,n.kt)("inlineCode",{parentName:"li"},"actor_path")," attribute.")),(0,n.kt)("p",null,"By default the path grouping is disabled. You can change this by launching the Mesmer extension with ",(0,n.kt)("inlineCode",{parentName:"p"},"-Dio.scalac.mesmer.actor.reporting-default=group")," configuration option. This will give all the actors' metrics the attribute ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/"'),"."),(0,n.kt)("p",null,"Alternatively, it is possible to override a single path grouping strategy as following"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'java -javaagent:path/to/opentelemetry-javaagent.jar \\\n  -Dotel.javaagent.extensions=path/to/mesmer-otel-extension.jar \\\n  -Dio.scalac.mesmer.actor.reporting-default=ignore \\\n  -Dio.scalac.mesmer.actor.rules."/user/**"=group \\\n  -Dio.scalac.mesmer.actor.rules."/system/**"=group \\\n  -jar your-app.jar\n')),(0,n.kt)("p",null,"This configuration will aggregate metrics for system and user hierarchies separately, grouping them by ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/system"')," and ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/user"')," attributes correspondingly."),(0,n.kt)("p",null,"The individual rule syntax is ",(0,n.kt)("inlineCode",{parentName:"p"},'io.scalac.mesmer.actor.rules."<MATCHING_PATH>"=<GROUPING_OPTION>'),". The matching path supports limited set of wildcards, aiding to group metrics for variable path segments."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"/")," - matches exactly one actor and therefore can be used only with the ",(0,n.kt)("inlineCode",{parentName:"p"},"instance")," grouping option.\nFor a topology of ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor")," and ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor/1")," and the rules"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'io.scalac.mesmer.actor.reporting-default=group\nio.scalac.mesmer.actor.rules."/user/my-actor"=instance\n')),(0,n.kt)("p",{parentName:"li"},"the metrics from ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor")," will get the attribute ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/user/my-actor"')," while the metrics from ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor/1")," will get the attribute ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/"')," and likely will be grouped with metrics from other actors.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"/","*")," - matches a single variable tailing segment.\nFor a topology of ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor"),", ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor/1"),", ",(0,n.kt)("em",{parentName:"p"},"/user/my-other-actor")," and the rules"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'io.scalac.mesmer.actor.reporting-default=ignore\nio.scalac.mesmer.actor.rules."/user/*"=instance\n')),(0,n.kt)("p",{parentName:"li"},"the metrics from ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor")," and ",(0,n.kt)("em",{parentName:"p"},"/user/my-other-actor")," will get same values for ",(0,n.kt)("inlineCode",{parentName:"p"},"actor_path")," attribute, while ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor/1")," will be ignored.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"/","*","*")," - matches all tailing segments.\nFor a topology of ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor"),", ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor/1"),", ",(0,n.kt)("em",{parentName:"p"},"/user/my-other-actor")," and the rules"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'io.scalac.mesmer.actor.reporting-default=ignore\nio.scalac.mesmer.actor.rules."/user/**"=instance\n')),(0,n.kt)("p",{parentName:"li"},"this will produce a unique metric for each actor with root at ",(0,n.kt)("em",{parentName:"p"},"/user"),". This wildcard also can be applied using with grouping,"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'io.scalac.mesmer.actor.reporting-default=ignore\nio.scalac.mesmer.actor.rules."/user/**"=group\n')),(0,n.kt)("p",{parentName:"li"},"Resulting in all metrics from actors with root at ",(0,n.kt)("em",{parentName:"p"},"/user")," to be aggregated using common attribute ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/user"')))))}u.isMDXComponent=!0}}]);