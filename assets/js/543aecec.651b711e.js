"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[360],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return g}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),g=n,d=u["".concat(p,".").concat(g)]||u[g]||m[g]||o;return r?a.createElement(d,i(i({ref:t},c),{},{components:r})):a.createElement(d,i({ref:t},c))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},350:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s}});var a=r(3117),n=(r(7294),r(3905));const o={sidebar_position:3},i="Configuration",l={unversionedId:"configuration",id:"configuration",title:"Configuration",description:"There are multiple ways to configure the Agent, including system properties, environment variables, and providing the configuration file.",source:"@site/../mesmer-docs/target/mdoc/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/docs/configuration",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/getting-started"},next:{title:"Supported metrics",permalink:"/docs/supported-metrics"}},p={},s=[{value:"OTEL namespace options",id:"otel-namespace-options",level:2},{value:"Mesmer options",id:"mesmer-options",level:2},{value:"Akka actors grouping",id:"akka-actors-grouping",level:3}],c={toc:s};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"configuration"},"Configuration"),(0,n.kt)("p",null,"There are multiple ways to configure the Agent, including system properties, environment variables, and providing the configuration file."),(0,n.kt)("p",null,"To provide the configuration file to the agent you can either ",(0,n.kt)("inlineCode",{parentName:"p"},"-Dotel.javaagent.configuration-file=<path-to-file>")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"OTEL_JAVAAGENT_CONFIGURATION_FILE")," environment varaible."),(0,n.kt)("h2",{id:"otel-namespace-options"},"OTEL namespace options"),(0,n.kt)("p",null,"You can find the full list of available configuration options ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md"},"here")),(0,n.kt)("h2",{id:"mesmer-options"},"Mesmer options"),(0,n.kt)("h3",{id:"akka-actors-grouping"},"Akka actors grouping"),(0,n.kt)("p",null,"When the actors' hierarchy grows or there are short-living actors referenced by a unique path name, it can be impractical to give each metric a unique set of attributes. This amplifies the amount of data exported and can affect collector performance. To solve this, Mesmer allows the definition of fine-grained rules on how metrics associated with different actors can be grouped together."),(0,n.kt)("p",null,"There are three actor attributes grouping options:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"group")," - the metrics, collected for all the actors matching the given path, share the ",(0,n.kt)("inlineCode",{parentName:"li"},"actor_path")," attribute."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"instance")," - the metrics, collected for actors matching this path, have a unique ",(0,n.kt)("inlineCode",{parentName:"li"},"actor_path")," attribute."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"disabled")," - the metrics, collected for all the actors matching the given path, do not get ",(0,n.kt)("inlineCode",{parentName:"li"},"actor_path")," attribute.")),(0,n.kt)("p",null,"By default the path grouping is disabled. You can change this by launching the Mesmer extension with ",(0,n.kt)("inlineCode",{parentName:"p"},"-Dio.scalac.mesmer.actor.reporting-default=group")," configuration option. This will give all the actors' metrics the attribute ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/"'),"."),(0,n.kt)("p",null,"Alternatively, it is possible to override a single path grouping strategy as following"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'java -javaagent:path/to/opentelemetry-javaagent.jar \\\n  -Dotel.javaagent.extensions=path/to/mesmer-otel-extension.jar \\\n  -Dio.scalac.mesmer.actor.reporting-default=ignore \\\n  -Dio.scalac.mesmer.actor.rules."/user/**"=group \\\n  -Dio.scalac.mesmer.actor.rules."/system/**"=group \\\n  -jar your-app.jar\n')),(0,n.kt)("p",null,"This configuration will aggregate metrics for system and user hierarchies separately, grouping them by ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/system"')," and ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/user"')," attributes correspondingly."),(0,n.kt)("p",null,"The individual rule syntax is ",(0,n.kt)("inlineCode",{parentName:"p"},'io.scalac.mesmer.actor.rules."<MATCHING_PATH>"=<GROUPING_OPTION>'),". The matching path supports limited set of wildcards, aiding to group metrics for variable path segments."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"/")," - matches exactly one actor and therefore can be used only with the ",(0,n.kt)("inlineCode",{parentName:"p"},"instance")," grouping option.\nFor a topology of ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor")," and ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor/1")," and the rules"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'io.scalac.mesmer.actor.reporting-default=group\nio.scalac.mesmer.actor.rules."/user/my-actor"=instance\n')),(0,n.kt)("p",{parentName:"li"},"the metrics from ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor")," will get the attribute ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/user/my-actor"')," while the metrics from ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor/1")," will get the attribute ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/"')," and likely will be grouped with metrics from other actors.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"/","*")," - matches a single variable tailing segment.\nFor a topology of ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor"),", ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor/1"),", ",(0,n.kt)("em",{parentName:"p"},"/user/my-other-actor")," and the rules"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'io.scalac.mesmer.actor.reporting-default=ignore\nio.scalac.mesmer.actor.rules."/user/*"=instance\n')),(0,n.kt)("p",{parentName:"li"},"the metrics from ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor")," and ",(0,n.kt)("em",{parentName:"p"},"/user/my-other-actor")," will get same values for ",(0,n.kt)("inlineCode",{parentName:"p"},"actor_path")," attribute, while ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor/1")," will be ignored.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"/","*","*")," - matches all tailing segments.\nFor a topology of ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor"),", ",(0,n.kt)("em",{parentName:"p"},"/user/my-actor/1"),", ",(0,n.kt)("em",{parentName:"p"},"/user/my-other-actor")," and the rules"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'io.scalac.mesmer.actor.reporting-default=ignore\nio.scalac.mesmer.actor.rules."/user/**"=instance\n')),(0,n.kt)("p",{parentName:"li"},"this will produce a unique metric for each actor with root at ",(0,n.kt)("em",{parentName:"p"},"/user"),". This wildcard also can be applied using with grouping,"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'io.scalac.mesmer.actor.reporting-default=ignore\nio.scalac.mesmer.actor.rules."/user/**"=group\n')),(0,n.kt)("p",{parentName:"li"},"Resulting in all metrics from actors with root at ",(0,n.kt)("em",{parentName:"p"},"/user")," to be aggregated using common attribute ",(0,n.kt)("inlineCode",{parentName:"p"},'actor_path="/user"')))))}m.isMDXComponent=!0}}]);