akka {
  actor {
    serialization-bindings {
      "io.scalac.extension.SerializableMessage" = jackson-cbor
    }
  }
}

io {
  scalac {
    akka-monitoring {

      #openTelemetry backend config
      backend {
        #name of backend
        name = "newrelic"
        #api-key needed to push data
        api-key = ${?API_KEY}
        #backend region to push to, currently support [us|eu]
        region = "eu",
        #name of the application that should appear in backend system
        service-name = "test_app"
      }
      #flag if extension should initialize backend on startup
      boot.backend = true

      #flags which module monitoring should be automatically started on extension initilization
      auto-start {
        akka-http = true
        akka-persistence = true
        akka-cluster = true
      }

      #flush configs
      cleaning {
        max-staleness = 20 seconds
        every = 5 seconds
      }

      #caching
      caching {
        http {
          max-entries = 10
        }
        persistence {
          max-entries = 10
        }
      }

      #names of all metrics gathered by the extension
      metrics {
        cluster-metrics {
          shards-per-region = "shards_per_region"
          entities-per-region = "entities_per_region"
          reachable-nodes = "reachable_nodes"
          unreachable-nodes = "unreachable_nodes"
          shard-regions-on-node = "shard_regions_on_node"
          entities-on-node = "entities_on_node"
          node-down = "node_down_total"
        }
        http-metrics {
          request-duration = "request_duration"
          request-total = "request_total"
        }
        persistence-metrics {
          recovery-time = "recovery_time"
        }
      }

    }
  }
}

extension-dispatcher {
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 1
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 0.5
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 2
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

