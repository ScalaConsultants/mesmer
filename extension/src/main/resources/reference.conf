akka {
  actor {
    serialization-bindings {
      "io.scalac.mesmer.extension.SerializableMessage" = jackson-cbor
    }
  }
}

io.scalac.mesmer.actor.rules {
  "/user" = group
  "/user/*" = instance
  "/system" = group
}

io {
  scalac {
    mesmer {

      #flags which module monitoring should be automatically started on extension initilization
      auto-start {
        akka-actor = true
        akka-http = true
        akka-persistence = true
        akka-cluster = true
        akka-stream = true
      }

      module {
        akka-http {
          enabled = true
          request-time = true
          request-counter = true
        }
      }

      #flush configs
      cleaning {
        max-staleness = 20 seconds
        every = 5 seconds
      }

      timeouts {
        query-region-stats = 2s
        stream-metric-collection = 2s
      }

      caching {
        stream {
          max-entries = 100
        }
        http {
          max-entries = 10
        }
        persistence {
          max-entries = 10
        }
      }

      #names of all metrics gathered by the extension
      metrics {
        actor-metrics {
          mailbox-size = "akka_actor_mailbox_size"
          mailbox-time-avg = "akka_actor_mailbox_time_avg"
          mailbox-time-min = "akka_actor_mailbox_time_min"
          mailbox-time-max = "akka_actor_mailbox_time_max"
          mailbox-time-sum = "akka_actor_mailbox_time_sum"
          stash-size = "akka_actor_stashed_total"
          received-messages = "akka_actor_received_messages_total"
          processed-messages = "akka_actor_processed_messages_total"
          failed-messages = "akka_actor_failed_messages"
          processing-time-avg = "akka_actor_processing_time_avg"
          processing-time-min = "akka_actor_processing_time_min"
          processing-time-max = "akka_actor_processing_time_max"
          processing-time-sum = "akka_actor_processing_time_sum"
          sent-messages = "akka_actor_sent_messages_totals"
          dropped-messages = "akka_actor_dropped_messages_totals"
        }

        stream-metrics {
          operator-processed = "akka_streams_operator_processed_total"
          operator-connections = "akka_streams_operator_connections"
          running-operators = "akka_streams_running_operators"
          operator-demand = "akka_streams_operator_demand"
          running-streams = "akka_streams_running_streams"
          stream-actors = "akka_streams_actors"
          stream-processed = "akka_streams_processed_messages"
        }

        cluster-metrics {
          shards-per-region = "akka_cluster_shards_per_region"
          entities-per-region = "akka_cluster_entities_per_region"
          reachable-nodes = "akka_cluster_shard_regions_on_node"
          unreachable-nodes = "akka_cluster_entities_on_node"
          shard-regions-on-node = "akka_cluster_reachable_nodes"
          entities-on-node = "akka_cluster_unreachable_nodes"
          node-down = "akka_cluster_node_down_total"
        }

        http-metrics {
          connections = "akka_http_connections"
          request-duration = "akka_http_request_duration"
          request-total = "akka_http_request_total"
        }

        persistence-metrics {
          recovery-time = "akka_persistence_recovery_time"
          recovery-totall = "akka_persistence_recovery_total"
          persistent-event = "akka_persistence_persistent_event"
          persistent-event-total = "akka_persistence_persistent_event_total"
          snapshot = "akka_persistence_snapshot_total"
        }
        actor-system-metrics {
          created-actors = "akka_system_created_actors_total"
          terminated-actors = "akka_system_terminated_actors_total"
        }

      }

      dispatcher {
        type = Dispatcher
        # What kind of ExecutionService to use
        executor = "fork-join-executor"
        # Configuration for the fork join pool
        fork-join-executor {
          # Min number of threads to cap factor-based parallelism number to
          parallelism-min = 1
          # Parallelism (threads) ... ceil(available processors * factor)
          parallelism-factor = 0.5
          # Max number of threads to cap factor-based parallelism number to
          parallelism-max = 2
        }
        # Throughput defines the maximum number of messages to be
        # processed per actor before the thread jumps to the next actor.
        # Set to 1 for as fair as possible.
        throughput = 100
      }
    }
  }
}

