#prometheus-community/kube-prometheus-stack
fullnameOverride: "monitoring"

prometheusOperator:
  tls:
    enabled: false
  admissionWebhooks:
    enabled: false

defaultRules:
  rules:
    kubeApiserver: false #long rules evaluation times
prometheus:
  prometheusSpec:
    query:
      maxSamples: 100000000
    serviceMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    retentionSize: 45GB
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    additionalScrapeConfigs:
      - job_name: "kubernetes-pods"
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - "accounts"
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
  # auto-discovery pods

  ingress:
    enabled: true
    hosts:
      - prometheus.akka-metrics.scalac.io
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: basic-auth

alertmanager:
  alertmanagerSpec:
    replicas: 1
  config:
    #global:
    #slack_api_url: ''
    route:
      # When a new group of alerts is created by an incoming alert, wait at
      # least 'group_wait' to send the initial notification.
      # This way ensures that you get multiple alerts for the same group that start
      # firing shortly after another are batched together on the first
      # notification.
      group_wait: 30s
      # When the first notification was sent, wait 'group_interval' to send a batch
      # of new alerts that started firing for that group.
      group_interval: 3m
      # If an alert has successfully been sent, wait 'repeat_interval' to
      # resend them.
      repeat_interval: 30m
  ingress:
    enabled: true
    hosts:
      - alertmanager.akka-metrics.scalac.io
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: basic-auth

grafana:
  replicas: 1
  rbac:
    pspUseAppArmor: false
  ingress:
    enabled: true
    hosts:
      - grafana.akka-metrics.scalac.io
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
  extraConfigMaps:
    - mountPath: "/var/lib/grafana"
      name: efs-grafana
kubeControllerManager:
  enabled: false
kubeScheduler:
  enabled: false
kubelet:
  serviceMonitor:
    https: false
